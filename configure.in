AC_INIT(gdl, 0.9)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE
AC_LANG(C++)
AC_PROG_CXX

AC_PROG_LIBTOOL

dnl ======================================================== 
dnl Checking for 64-bit OS                                  
dnl ========================================================
AC_LANG_SAVE
AC_LANG_C
AC_MSG_CHECKING(for 64-bit OS)
AC_TRY_RUN([ int main () {
    if (sizeof(long) == 8) { return 0; } return 1; } ],
        result="yes", result="no", result="maybe" )
AC_MSG_RESULT("$result")
if test "$result" = "yes"; then
    AC_DEFINE([HAVE_64BIT_OS], [1], [Define if 64-bit OS])
fi
AC_SUBST(HAVE_64BIT_OS)

AC_LANG_RESTORE


dnl check if we build GDL standalone or the python module
dnl default: build standalone version on GDL
PYTHON_MODULE="no"
AC_ARG_ENABLE(python_module,	
 	[  --enable-python_module  make GDL python module (default: standalone version)],
	[ PYTHON_MODULE="$enableval"
	])

if test "x$PYTHON_MODULE" = "xyes"; then
	AC_DEFINE([PYTHON_MODULE], [1], 
	[Define if you want to build the GDL python module])
fi
AM_CONDITIONAL(BUILDASLIBRARY, test "x$PYTHON_MODULE" = "xyes")



AC_ARG_WITH(ncursesdir,
 	[  --with-ncursesdir=DIR   specify the ncurses directory tree ],
	[ LIBS="$LIBS -L$withval/lib"
         INCLUDES="$INCLUDES -I$withval/include"
       ])

AC_CHECK_LIB(ncurses, initscr)



dnl readline (we need *GNU* readline)
AC_ARG_WITH(readlinedir,
 	[  --with-readlinedir=DIR  specify the GNU readline directory tree ],
	[ with_readlinedir="$withval"])

dnl default is yes, build with readline, using default path
if test "x$with_readlinedir" = "x"; then
  with_readlinedir=yes
fi

if test "x$with_readlinedir" != "xno"; then

  if test "x$with_readlinedir" != "xyes"; then
dnl make sure this directory get in the path first 
dnl as OS X provides another readline library
    LIBS="-L$with_readlinedir/lib -L$with_readlinedir $LIBS -lreadline"
    INCLUDES="$INCLUDES -I$with_readlinedir/include -I$with_readlinedir"
  else
    LIBS="$LIBS -lreadline"
  fi

  AC_CHECK_LIB(readline, stifle_history,
  	[ AC_DEFINE( [HAVE_LIBREADLINE], [1], [GNU readline library])],
        [
	echo ""
	echo "Error! GNU readline was not found."
	echo "       Use --with-readlinedir=no to expicitely disable it"
	echo "       Check the README or use configure --help for other libraries needed"

	exit -1
	])

  AC_CHECK_LIB(readline, rl_get_screen_size,[
       AC_DEFINE([RL_GET_SCREEN_SIZE], [1], [GNU readline with rl_get_screen_size])],
        [
	echo ""
	echo "Warning! Older GNU readline without 'rl_get_screen_size' was found."
	echo "         For resized terminals the size might not be updated correctly"
	echo "         If this is a problem please install a recent version of readline"
	])

fi

dnl end of READLINE
dnl beginning of Zlib

AC_ARG_WITH(zlibdir,	
	[  --with-zlibdir=DIR      specify the Zlib directory tree ],
	[with_zlib="$withval" ])

if test "x$with_zlib" = "x"; then
  with_zlib=yes
fi

if test "x$with_zlib" = "xno"; then
	echo ""	
	echo "Error! ZLIB library is obligatory."
        exit -1
fi

if test "x$with_zlib" != "xyes"; then
    LIBS="$LIBS -L$with_zlib/lib -lz"
    INCLUDES="$INCLUDES -I$with_zlib/include"
else
    LIBS="$LIBS -lz"
fi

AC_CHECK_LIB(z, gzopen, [AC_DEFINE([HAVE_LIBZ], [1], [Zlib library])], 
 	[
 	echo ""
 	echo "Error! zlib library is required but was not found"
 	echo "       Use --with-zlibdir=DIR to specify the zlib directory tree"
 	exit -1
 	])

dnl End of Zlib

dnl wxWidgets
dnl default no (for now)
if test "x$with_wxWidgets" = "x"; then
   with_wxWidgets=no
fi

if test "x$with_wxWidgets" != "xno"; then
	LIBS="$LIBS `wx-config --libs`"
	INCLUDES="$INCLUDES `wx-config --cxxflags`"
	LIBS="$LIBS `wx-config --libs` `wx-config --cxxflags`"
dnl autoconf cannot handle demangled names
	AC_CHECK_LIB(wx_base-2.8, _Z12wxInitializeiPPc, [
	AC_DEFINE([HAVE_LIBWXWIDGETS], [1], [wxWidgets library])
	], [
	echo ""
	echo "Error! You must have wxWidgets library 2.8 installed"
	echo "       Use --with-wxWidgets=no to expicitely disable it"
	echo "       Check the README or use configure --help for other libraries needed"
     echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
	exit -1
	])
fi

dnl AC_CHECK_LIB(ltdl, lt_dlopen,
dnl [AC_DEFINE([HAVE_LIBLTDL], [1], [Use libltdl])], 
dnl [
dnl echo ""
dnl echo "Error! ltdl library is required but was not found"
dnl exit -1
dnl ])


dnl AC_ARG_WITH(gsldir,
dnl  	[  --with-gsldir=DIR     specify the GSL directory tree ],
dnl 	[ LIBS="$LIBS -L$withval/lib"
dnl          INCLUDES="$INCLUDES -I$withval/include"
dnl        ])


dnl GSL
AC_ARG_WITH(gsldir,	
	[  --with-gsldir=DIR       specify the GSL directory tree ],
	[with_gsl="$withval" ])

if test "x$with_gsl" = "x"; then
  with_gsl=yes
fi

if test "x$with_gsl" = "xno"; then	
	echo ""	
	echo "Error! Gnu Scientific Library (1.4 or higher) is mandatory"
        exit -1
fi

if test "x$with_gsl" != "xyes"; then
    LIBS="$LIBS -L$with_gsl/lib -lgsl -lgslcblas"
    INCLUDES="$INCLUDES -I$with_gsl/include"
else
    LIBS="$LIBS -lgsl -lgslcblas"
fi

dnl GNU Scientific Library
dnl AC_CHECK_LIB(gsl, gsl_block_alloc, [], [
AC_CHECK_LIB(gsl, gsl_cdf_ugaussian_P, [], [
	echo ""
	echo "Error! Gnu Scientific Library (1.4 or higher) is mandatory"
        exit -1
	])
AC_CHECK_LIB(gslcblas, cblas_drot, [], [
	echo ""
	echo "Error! libgslcblas (part of GSL) is mandatory"
        exit -1
	])

dnl On OS X determining the version number fails
dnl We check GSL library version
dnl sinclude(gsl.m4)
dnl AM_PATH_GSL(1.4,,
dnl 	AC_MSG_ERROR('minimal version of GSL is 1.4'))


dnl plplot 
dnl AC_CHECK_LIB(plplotcxxd, plsexit, [], [
dnl 	echo ""
dnl 	echo "Error! You must have the PLPLOT library installed"
dnl        exit -1
dnl 	])

dnl AC_ARG_WITH(plplotdir,
dnl 	[  --with-plplotdir=DIR     specify the PLPLOT directory tree ],
dnl 	[ LIBS="$LIBS -L$withval/lib -lstdc++"
dnl           INCLUDES="$INCLUDES -I$withval/include"
dnl        ])

dnl plplot
AC_ARG_WITH(plplotdir,	
	[  --with-plplotdir=DIR    specify the plplot directory tree ],
	[with_plplot="$withval" ])

if test "x$with_plplot" = "x"; then
  with_plplot=yes
fi

if test "x$with_plplot" = "xno"; then	
	echo ""	
	echo "Error! PLPLOT library is obligatory."
        exit -1
fi

if test "x$with_plplot" != "xyes"; then
    LIBS="$LIBS -L$with_plplot/lib -lplplotd -lplplotcxxd"
    INCLUDES="$INCLUDES -I$with_plplot/include"
else
    LIBS="$LIBS -lplplotd -lplplotcxxd"
fi

AC_CHECK_LIB(plplotcxxd, plsexit, [AC_DEFINE([HAVE_LIBPLPLOTCXXD], [1], [plplot library])], 
	[
	echo ""
	echo "Error! plplot library is required but was not found"
	echo "       Use --with-plplot=DIR to specify the plplot directory tree"
	exit -1
	])

 
dnl ImageMagick
AC_ARG_WITH(Magick,	
	[  --with-Magick[=DIR]       use ImageMagick package (with optional path DIR) ],
	[with_Magick="$withval" ])

dnl ImageMagick: default is yes, build with ImageMagick, using default path
if test "x$with_Magick" = "x"; then
  with_Magick=yes
fi

if test "x$with_Magick" != "xno"; then
  if test "x$with_Magick" != "xyes"; then
    LIBS="$LIBS -L$with_Magick/lib -lMagick++"
    INCLUDES="$INCLUDES -I$with_Magick/include"
  else
    LIBS="$LIBS -lMagick++"
    INCLUDES="$INCLUDES -I/usr/include/magick"
  fi

  AC_CHECK_LIB(Magick, GetMagickVersion, [AC_DEFINE([USE_MAGICK], [1], [Define if you want to use ImageMagick])], [
    echo ""
    echo "Error! ImageMagick version 5.5.7 or later is required but was not found"
    echo "       Use --with-Magick=DIR to specify the ImageMagick directory tree"
    echo "       Use --with-Magick=no  to not use it"
    echo "       Check the README or use configure --help for other libraries needed"
    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
    exit -1
    ])
fi


dnl netCDF -- before HDF (as multiple defined symbols should be used from netCDF)
AC_ARG_WITH(netcdf,	
	[  --with-netcdf[=DIR]       use netCDF package (with optional path DIR) ],
	[with_netcdf="$withval" ])

dnl Netcdf: default is yes, build with netcdf, using default path
if test "x$with_netcdf" = "x"; then
  with_netcdf=yes
fi

if test "x$with_netcdf" != "xno"; then
  if test "x$with_netcdf" != "xyes"; then
dnl	if test "x$with_hdf" = "xno"; then
	LIBS="$LIBS -L$with_netcdf/lib -lnetcdf"
	INCLUDES="$INCLUDES -I$with_netcdf/include"
dnl	fi
  else
dnl	if test "x$with_hdf" = "xno"; then
	LIBS="$LIBS -L/usr/lib/netcdf-3 -lnetcdf"
	INCLUDES="$INCLUDES -I/usr/include/netcdf-3"
dnl	fi
  fi

dnl  if test "x$with_hdf" = "xno"; then
  	AC_CHECK_LIB(netcdf, nc_open, [AC_DEFINE([USE_NETCDF], [1], [Define if you want to use netCDF])], [
	    echo ""
	    echo "Error! netCDF version 3.5.1 or later is required but was not found"
	    echo "       Use --with-netcdf=DIR to specify the netcdf directory tree"
	    echo "       Use --with-netcdf=no  to not use it"
	    echo "       Check the README or use configure --help for other libraries needed"
	    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
	    exit -1
	    ])
dnl else
dnl	AC_DEFINE([USE_NETCDF], [1], [Define if you want to use netCDF])
dnl	echo "Using HDF library also for netCDF"
dnl  fi
fi


dnl HDF (version 4) 
AC_ARG_WITH(hdf,	
	[  --with-hdf[=DIR]          use HDF package (with optional path DIR) ],
	[with_hdf="$withval" ])

dnl HDF: default is yes, build with HDF, using default path
if test "x$with_hdf" = "x"; then
  with_hdf=yes
fi

if test "x$with_hdf" != "xno"; then
  if test "x$with_hdf" != "xyes"; then
    LIBS="$LIBS -L$with_hdf/lib -L$with_hdf/lib/hdf -lmfhdf -ldf -ljpeg -lz"
    INCLUDES="$INCLUDES -I$with_hdf/include -I$with_hdf/include/hdf"
  else
    LIBS="$LIBS -L/usr/lib/hdf -lmfhdf -ldf -ljpeg -lz"
    INCLUDES="$INCLUDES -I/usr/include/hdf"
  fi

  AC_CHECK_LIB(df, Hopen, [AC_DEFINE([USE_HDF], [1], [Define if you want to use HDF])], [
    echo ""
    echo "Error! HDF version 4 is required but was not found"
    echo "       Use --with-hdf=DIR to specify the HDF directory tree"
    echo "       Use --with-hdf=no  to not use it"
    echo "       Check the README or use configure --help for other libraries needed"
    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
    exit -1
    ])

  AC_CHECK_LIB(mfhdf, SDstart, [AC_DEFINE([USE_HDF], [1], [Define if you want to use HDF])], [
    echo ""
    echo "Error! HDF version 4 or later is required but was not found"
    echo "       Use --with-hdf=DIR to specify the HDF directory tree"
    echo "       Use --with-hdf=no  to not use it"
    echo "       Check the README or use configure --help for other libraries needed"
    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
    exit -1
    ])

dnl  AC_CHECK_LIB(mfhdf, SDstart, [AC_DEFINE([USE_HDF], [1], [Define if you want to use HDF])], [
dnl    echo ""
dnl    echo "Error! HDF version 4 or later is required but was not found"
dnl    echo "       Use --with-hdf=DIR to specify the HDF directory tree"
dnl    echo "       Use --with-hdf=no  to not use it"
dnl    exit -1
dnl    ])
fi


dnl HDF5
AC_ARG_WITH(hdf5,	
	[  --with-hdf5[=DIR]         use HDF5 package (with optional path DIR) ],
	[with_hdf5="$withval" ])

dnl HDF5: default is yes, build with HDF5, using default path
if test "x$with_hdf5" = "x"; then
  with_hdf5=yes
fi

if test "x$with_hdf5" != "xno"; then
  if test "x$with_hdf5" != "xyes"; then
    LIBS="$LIBS -L$with_hdf5/lib -L$with_hdf5/lib/hdf -L$with_hdf5/lib/hdf5 -lhdf5"
    INCLUDES="$INCLUDES -I$with_hdf5/include -I$with_hdf5/include/hdf -I$with_hdf5/include/hdf5"
  else
    INCLUDES="$INCLUDES -I/usr/include/hdf -I/usr/include/hdf5"
    LIBS="$LIBS -L/usr/lib/hdf -L/usr/lib/hdf5 -lhdf5"
  fi

  AC_CHECK_LIB(hdf5, H5Fopen, [AC_DEFINE([USE_HDF5], [1], [Define if you want to use HDF5])], [
    echo ""
    echo "Error! HDF version 5 is required but was not found"
    echo "       Use --with-hdf5=DIR to specify the HDF5 directory tree"
    echo "       Use --with-hdf5=no  to not use it"
    echo "       Check the README or use configure --help for other libraries needed"
    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
    exit -1
    ])
fi


dnl FFTW
AC_ARG_WITH(fftw,	
	[  --with-fftw[=DIR]         use FFTW package (with optional path DIR) ],
	[with_fftw="$withval" ])

dnl FFTW: default is no
if test "x$with_fftw" = "x"; then
  with_fftw=no
  echo "FFTW lib not explicitely enabled. Using GSL version for FFT."
fi

if test "x$with_fftw" != "xno"; then
  if test "x$with_fftw" != "xyes"; then
    LIBS="$LIBS -L$with_fftw/lib -lfftw3"
    INCLUDES="$INCLUDES -I$with_fftw/include"
  else
    INCLUDES="$INCLUDES -I/usr/include"
    LIBS="$LIBS -lfftw3"
  fi

  AC_CHECK_LIB(fftw3, fftw_malloc, [AC_DEFINE([USE_FFTW], [1], [Define if you want to use FFTW])], [
    echo ""
    echo "Error! FFTW3 version 3 is required but was not found"
    echo "       Use --with-fftw=DIR to specify the FFTW directory tree"
    echo "       Use --with-fftw=no  to not use it"
    echo "       Check the README or use configure --help for other libraries needed"
    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
    exit -1
    ])
fi

if test "x$with_fftw" != "xno"; then
  if test "x$with_fftw" != "xyes"; then
    LIBS="$LIBS -L$with_fftw/lib -lfftw3f"
    INCLUDES="$INCLUDES -I$with_fftw/include"
  else
    INCLUDES="$INCLUDES -I/usr/include"
    LIBS="$LIBS -lfftw3f"
  fi

  AC_CHECK_LIB(fftw3f, fftwf_malloc, [AC_DEFINE([USE_FFTW], [1], [Define if you want to use FFTW])], [
    echo ""
    echo "Error! FFTW3F version 3 is required but was not found"
    echo "       Use --with-fftw=DIR to specify the FFTW directory tree"
    echo "       Use --with-fftw=no  to not use it"
    echo "       Check the README or use configure --help for other libraries needed"
    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
    exit -1
    ])
fi


dnl LIBPROJ4
AC_ARG_WITH(libproj4,	
	[  --with-libproj4[=DIR]     use LIBPROJ4 package (with optional path DIR) ],
	[with_libproj4="$withval" ])

dnl LIBPROJ4: default is no
if test "x$with_libproj4" = "x"; then
  with_libproj4=no
  echo "LIBPROJ4 lib not explicitely enabled. Map projection routines not supported."
fi

if test "x$with_libproj4" != "xno"; then
  if test "x$with_libproj4" != "xyes"; then
    LIBS="$LIBS -L$with_libproj4/lib -lproj4"
    INCLUDES="$INCLUDES -I$with_libproj4/include"
  else
    INCLUDES="$INCLUDES -I/usr/include"
    LIBS="$LIBS -lproj4"
  fi

  AC_CHECK_LIB(proj4, pj_init, [AC_DEFINE([USE_LIBPROJ4], [1], [Define if you want to use LIBPROJ4])], [
    echo ""
    echo "Error! LIBPROJ4 is required but was not found"
    echo "       Use --with-libproj4=DIR to specify the LIBPROJ4 directory tree"
    echo "       Use --with-libproj4=no  to not use it"
    echo "       Check the README or use configure --help for other libraries needed"
    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
    exit -1
    ])
fi


dnl MPICH
AC_ARG_WITH(mpich,	
	[  --with-mpich[=DIR]        use MPICH (experimental) (with optional path DIR) ],
	[with_mpich="$withval" ])

dnl MPICH: default is no
if test "x$with_mpich" = "x"; then
  with_mpich=no
#  echo "MPICH lib not explicitely enabled."
fi

if test "x$with_mpich" != "xno"; then
  if test "x$with_mpich" != "xyes"; then
    LIBS="$LIBS -L$with_mpich/lib -lmpich"
    INCLUDES="$INCLUDES -I$with_mpich/include"
  else
    INCLUDES="$INCLUDES -I/usr/include"
    LIBS="$LIBS -lmpich"
  fi

  AC_CHECK_LIB(mpich, MPI_Init, [AC_DEFINE([USE_MPI], [1], [Define if you want to use MPI])], [
    echo ""
    echo "Error! MPICH is required but was not found"
    echo "       Use --with-mpich=DIR to specify the MPICH directory tree"
    echo "       Use --with-mpich=no  to not use it"
    echo "       Check the README or use configure --help for other libraries needed"
    echo "       (--with-xxxdir = obligatory, --with-xxx = optional (--with-xxx=no to disable))"
    exit -1
    ])
fi


dnl python
AC_ARG_WITH(python,
	[  --with-python[=DIR]       use Python package (with optional path DIR) ],
	[with_python="$withval" ])

dnl Python: default is yes, build with python, using default path
if test "x$with_python" = "x"; then
  with_python=yes
fi

if test "x$with_python" != "xno"; then

dnl  PYTHON_VERSION="2.3"
AC_ARG_ENABLE(python_version,	
 	[  --enable-python_version  set explicit python version to use (eg. 2.4)],
	[ PYTHON_VERSION="$enableval"
	])

if test "x$PYTHON_VERSION" = "x"; then

   echo -n "Automatic determination of python version."

   queryfile=$ac_confdir/query_version.py
   echo # tmp file auto (re)generated by GDL configure. Please delete > $queryfile
   echo import sys >> $queryfile
   echo print \'%s.%s\' % sys.version_info[\[0:2\]] >> $queryfile
dnl   echo print sys.version.split\(\'.\'\)[\[0\]]+\".\"+sys.version.split\(\'.\'\)[\[1\]] >> $queryfile
 
  PYTHON_VERSION=`python $queryfile`
   rm $queryfile
fi

  if test "x$with_python" != "xyes"; then
    LIBS="$LIBS -L$with_python/lib" 
dnl "-lpython2.3"
dnl for Mac OS X 
    LIBS="$LIBS -L$with_python/lib/python$PYTHON_VERSION/config -lpython$PYTHON_VERSION"
dnl    LIBS="$LIBS -L$with_python/lib/python2.3/config -lpython2.3"
    INCLUDES="$INCLUDES -I$with_python/include/python$PYTHON_VERSION"
dnl    INCLUDES="$INCLUDES -I$with_python/include/python2.3"
  else
    LIBS="$LIBS -lpython$PYTHON_VERSION"
dnl    LIBS="$LIBS -lpython2.3"
    INCLUDES="$INCLUDES -I/usr/include/python$PYTHON_VERSION"
dnl    INCLUDES="$INCLUDES -I/usr/include/python2.3"
  fi

  AC_CHECK_LIB(python$PYTHON_VERSION, Py_Initialize, 
  [AC_DEFINE([USE_PYTHON],[1],[Define if you want to use python])], 
  [ 
dnl  AC_CHECK_LIB(python2.3, Py_Initialize, 
dnl  [AC_DEFINE([USE_PYTHON],[1],[Define if you want to use python])], 
dnl  [ echo ""
dnl    echo "Error! Python version 2.4 or 2.3 is required but was not found"
dnl    echo "       Use --with-python=DIR to specify the python directory tree"
dnl    echo "       Use --with-python=no  to not use it"
dnl    exit -1
dnl    ])

    echo ""
    echo "Error! Python version $PYTHON_VERSION is required but was not found"
    echo "       Use --with-python=DIR to specify the python directory tree"
    echo "       Use --with-python=no  to not use it"
    exit -1
    ])
fi

AC_DEFUN([AC_DEFINE_DIR], [
  prefix_NONE=
  exec_prefix_NONE=
  test "x$prefix" = xNONE && prefix_NONE=yes && prefix=$ac_default_prefix
  test "x$exec_prefix" = xNONE && exec_prefix_NONE=yes && exec_prefix=$prefix
dnl In Autoconf 2.60, ${datadir} refers to ${datarootdir}, which in turn
dnl refers to ${prefix}.  Thus we have to use `eval' twice.
  eval ac_define_dir="\"[$]$2\""
  eval ac_define_dir="\"$ac_define_dir\""
  AC_SUBST($1, "$ac_define_dir")
  AC_DEFINE_UNQUOTED($1, "$ac_define_dir", [$3])
  test "$prefix_NONE" && prefix=NONE
  test "$exec_prefix_NONE" && exec_prefix=NONE
])

AC_DEFINE_DIR([EXEC_PREFIX], [exec_prefix], [--exec-prefix or default])
#AC_DEFINE([EXEC_PREFIX],[\"`echo ${exec_prefix}`\"],[GDL installation directory])

echo System is:  ${host}

DARWIN="no"

dnl check for specific architecture
case "${host}" in
  powerpc-*-darwin* )
    dnl PowerPC Darwin based distributions (including Mac OS X)
    LDFLAGS="$LDFLAGS -bind_at_load"
    DARWIN="yes"
    dnl   LDFLAGS="$LDFLAGS"
    ;;

  powerpc-*-linux* )
    LDFLAGS="$LDFLAGS -rdynamic"
    ;;

  *linux*)
    dnl Linux
    dnl LINKIMAGE support
    dnl (-ltermcap was reported to solve problems with readline)
    dnl LDFLAGS="$LDFLAGS -ltermcap -rdynamic -z muldefs"
    LDFLAGS="$LDFLAGS -rdynamic -z muldefs"
    ;;

dnl  *)
dnl    AC_MSG_ERROR(unknown system type ${host}.)
dnl    ;;
esac

dnl check if old darwin (needs some workarounds) 
case "${host}" in

  *darwin6*)
    dnl Jaguar
    AC_DEFINE([OLD_DARWIN], [1], [Pre-10.5 version of OS X])
    ;;
  *darwin7*)
    dnl Panther
    AC_DEFINE([OLD_DARWIN], [1], [Pre-10.5 version of OS X])
    ;;
  *darwin8.8*)
    dnl newer Tiger
    ;;
  *darwin8.9*)
    dnl newer Tiger
    ;;
  *darwin8.10*)
    dnl newer Tiger
    ;;
  *darwin8.11*)
    dnl newer Tiger
    ;;
  *darwin8.12*)
    dnl newer Tiger
    ;;
  *darwin8.13*)
    dnl newer Tiger
    ;;
  *darwin8.14*)
    dnl newer Tiger
    ;;
  *darwin9*)
    dnl post Tiger
    ;;
  *darwin8*)
    dnl Tiger
    AC_DEFINE([OLD_DARWIN], [1], [Pre-10.4.8 version of OS X])
    ;;
esac



dnl for src/Makefile.am: OS X linker does not know -z
AM_CONDITIONAL(DARWIN, test "x$DARWIN" = "xyes")


EXT_LIBS="$EXT_LIBS $LIBS"
EXT_INCLUDES="$EXT_INCLUDES $INCLUDES"
AC_SUBST(EXT_LIBS)
AC_SUBST(EXT_INCLUDES)




dnl some stuff copied from wxWindows

dnl install checks
dnl   defines INSTALL with the appropriate command
AC_PROG_INSTALL

dnl   make install path absolute (if not already);
dnl   will fail with (some) MSDOS paths
case ${INSTALL} in
  /* ) # Absolute
     ;;
  ?:* ) # Drive letter, considered as absolute.
     ;;
  *)
     INSTALL=`pwd`/${INSTALL} ;;
esac


case "${host}" in

    dnl The other BSD's should probably go in here too, since this is
    dnl to workaround a strange static lib BSDism.
    dnl Mac OS X install seems to ignore -p option...
    *-*-darwin* )
        INSTALL_PROGRAM="cp -fp"
        INSTALL_DATA="cp -fp"
        ;;
    *)
        ;;
esac




dnl echo LIBS $LIBS
dnl echo INCLUDES $INCLUDES

dnl Checks for header files.
dnl AC_HEADER_STDC

dnl Checks for typedefs, structures, and compiler characteristics.
dnl AC_C_CONST

dnl Checks for library functions.
dnl AC_CHECK_FUNCS(strdup strtod strtol abs)

dnl perform program name transformation
dnl AC_ARG_PROGRAM

AC_CONFIG_FILES(Makefile src/Makefile src/antlr/Makefile)

AC_OUTPUT

