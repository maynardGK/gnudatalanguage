#ifndef INC_GDLTokenTypes_hpp_
#define INC_GDLTokenTypes_hpp_

/* $ANTLR 2.7.4: "gdlc.g" -> "GDLTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API GDLTokenTypes {
#endif
	enum {
		EOF_ = 1,
		ALL = 4,
		ASSIGN = 5,
		ASSIGN_REPLACE = 6,
		ARRAYDEF = 7,
		ARRAYIX = 8,
		ARRAYIX_ALL = 9,
		ARRAYIX_ORANGE = 10,
		ARRAYIX_RANGE = 11,
		ARRAYIX_ORANGE_S = 12,
		ARRAYIX_RANGE_S = 13,
		ARRAYEXPR = 14,
		ARRAYEXPR_FN = 15,
		BLOCK = 16,
		BREAK = 17,
		CONTINUE = 18,
		COMMONDECL = 19,
		COMMONDEF = 20,
		CONSTANT = 21,
		DEREF = 22,
		ELSEBLK = 23,
		EXPR = 24,
		FOR_STEP = 25,
		FCALL = 26,
		FCALL_LIB = 27,
		FCALL_LIB_RETNEW = 28,
		IF_ELSE = 29,
		KEYDECL = 30,
		KEYDEF = 31,
		KEYDEF_REF = 32,
		KEYDEF_REF_CHECK = 33,
		KEYDEF_REF_EXPR = 34,
		LABEL = 35,
		MPCALL = 36,
		MPCALL_PARENT = 37,
		MFCALL = 38,
		MFCALL_LIB = 39,
		MFCALL_LIB_RETNEW = 40,
		MFCALL_PARENT = 41,
		MFCALL_PARENT_LIB = 42,
		MFCALL_PARENT_LIB_RETNEW = 43,
		NOP = 44,
		NSTRUC = 45,
		NSTRUC_REF = 46,
		ON_IOERROR_NULL = 47,
		PCALL = 48,
		PCALL_LIB = 49,
		PARADECL = 50,
		POSTDEC = 51,
		POSTINC = 52,
		DECSTATEMENT = 53,
		INCSTATEMENT = 54,
		REF = 55,
		REF_CHECK = 56,
		REF_EXPR = 57,
		RETURN = 58,
		RETF = 59,
		RETP = 60,
		STRUC = 61,
		SYSVAR = 62,
		UMINUS = 63,
		VAR = 64,
		VARPTR = 65,
		END = 66,
		FUNCTION = 67,
		PRO = 68,
		IDENTIFIER = 69,
		METHOD = 70,
		COMMA = 71,
		BEGIN = 72,
		COLON = 73,
		SWITCH = 74,
		OF = 75,
		ELSE = 76,
		CASE = 77,
		END_U = 78,
		FORWARD = 79,
		EQUAL = 80,
		COMPILE_OPT = 81,
		COMMON = 82,
		ENDIF = 83,
		ENDELSE = 84,
		ENDCASE = 85,
		ENDSWITCH = 86,
		ENDFOR = 87,
		ENDWHILE = 88,
		ENDREP = 89,
		DEC = 90,
		INC = 91,
		AND_OP_EQ = 92,
		ASTERIX_EQ = 93,
		EQ_OP_EQ = 94,
		GE_OP_EQ = 95,
		GTMARK_EQ = 96,
		GT_OP_EQ = 97,
		LE_OP_EQ = 98,
		LTMARK_EQ = 99,
		LT_OP_EQ = 100,
		MATRIX_OP1_EQ = 101,
		MATRIX_OP2_EQ = 102,
		MINUS_EQ = 103,
		MOD_OP_EQ = 104,
		NE_OP_EQ = 105,
		OR_OP_EQ = 106,
		PLUS_EQ = 107,
		POW_EQ = 108,
		SLASH_EQ = 109,
		XOR_OP_EQ = 110,
		MEMBER = 111,
		REPEAT = 112,
		UNTIL = 113,
		WHILE = 114,
		DO = 115,
		FOR = 116,
		GOTO = 117,
		ON_IOERROR = 118,
		IF = 119,
		THEN = 120,
		LBRACE = 121,
		RBRACE = 122,
		SLASH = 123,
		LSQUARE = 124,
		RSQUARE = 125,
		SYSVARNAME = 126,
		EXCLAMATION = 127,
		LCURLY = 128,
		RCURLY = 129,
		INHERITS = 130,
		CONSTANT_HEX_BYTE = 131,
		CONSTANT_HEX_LONG = 132,
		CONSTANT_HEX_LONG64 = 133,
		CONSTANT_HEX_INT = 134,
		CONSTANT_HEX_I = 135,
		CONSTANT_HEX_ULONG = 136,
		CONSTANT_HEX_ULONG64 = 137,
		CONSTANT_HEX_UI = 138,
		CONSTANT_HEX_UINT = 139,
		CONSTANT_BYTE = 140,
		CONSTANT_LONG = 141,
		CONSTANT_LONG64 = 142,
		CONSTANT_INT = 143,
		CONSTANT_I = 144,
		CONSTANT_ULONG = 145,
		CONSTANT_ULONG64 = 146,
		CONSTANT_UI = 147,
		CONSTANT_UINT = 148,
		CONSTANT_OCT_BYTE = 149,
		CONSTANT_OCT_LONG = 150,
		CONSTANT_OCT_LONG64 = 151,
		CONSTANT_OCT_INT = 152,
		CONSTANT_OCT_I = 153,
		CONSTANT_OCT_ULONG = 154,
		CONSTANT_OCT_ULONG64 = 155,
		CONSTANT_OCT_UI = 156,
		CONSTANT_OCT_UINT = 157,
		CONSTANT_FLOAT = 158,
		CONSTANT_DOUBLE = 159,
		ASTERIX = 160,
		DOT = 161,
		STRING_LITERAL = 162,
		POW = 163,
		MATRIX_OP1 = 164,
		MATRIX_OP2 = 165,
		MOD_OP = 166,
		PLUS = 167,
		MINUS = 168,
		LTMARK = 169,
		GTMARK = 170,
		NOT_OP = 171,
		LOG_NEG = 172,
		EQ_OP = 173,
		NE_OP = 174,
		LE_OP = 175,
		LT_OP = 176,
		GE_OP = 177,
		GT_OP = 178,
		AND_OP = 179,
		OR_OP = 180,
		XOR_OP = 181,
		LOG_AND = 182,
		LOG_OR = 183,
		QUESTION = 184,
		STRING = 185,
		INCLUDE = 186,
		EOL = 187,
		W = 188,
		D = 189,
		L = 190,
		H = 191,
		O = 192,
		EXP = 193,
		DBL_E = 194,
		DBL = 195,
		CONSTANT_OR_STRING_LITERAL = 196,
		COMMENT = 197,
		END_MARKER = 198,
		WHITESPACE = 199,
		SKIP_LINES = 200,
		CONT_STATEMENT = 201,
		END_OF_LINE = 202,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_GDLTokenTypes_hpp_*/
