#ifndef INC_GDLTokenTypes_hpp_
#define INC_GDLTokenTypes_hpp_

/* $ANTLR 2.7.6 (20071205): "gdlc.g" -> "GDLTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API GDLTokenTypes {
#endif
	enum {
		EOF_ = 1,
		ALL = 4,
		ASSIGN = 5,
		ASSIGN_INPLACE = 6,
		ASSIGN_REPLACE = 7,
		ARRAYDEF = 8,
		ARRAYDEF_CONST = 9,
		ARRAYIX = 10,
		ARRAYIX_ALL = 11,
		ARRAYIX_ORANGE = 12,
		ARRAYIX_RANGE = 13,
		ARRAYIX_ORANGE_S = 14,
		ARRAYIX_RANGE_S = 15,
		ARRAYEXPR = 16,
		ARRAYEXPR_FN = 17,
		BLOCK = 18,
		BREAK = 19,
		CONTINUE = 20,
		COMMONDECL = 21,
		COMMONDEF = 22,
		CONSTANT = 23,
		DEREF = 24,
		ELSEBLK = 25,
		EXPR = 26,
		FOR_STEP = 27,
		FCALL = 28,
		FCALL_LIB = 29,
		FCALL_LIB_RETNEW = 30,
		IF_ELSE = 31,
		KEYDECL = 32,
		KEYDEF = 33,
		KEYDEF_REF = 34,
		KEYDEF_REF_CHECK = 35,
		KEYDEF_REF_EXPR = 36,
		LABEL = 37,
		MPCALL = 38,
		MPCALL_PARENT = 39,
		MFCALL = 40,
		MFCALL_LIB = 41,
		MFCALL_LIB_RETNEW = 42,
		MFCALL_PARENT = 43,
		MFCALL_PARENT_LIB = 44,
		MFCALL_PARENT_LIB_RETNEW = 45,
		NOP = 46,
		NSTRUC = 47,
		NSTRUC_REF = 48,
		ON_IOERROR_NULL = 49,
		PCALL = 50,
		PCALL_LIB = 51,
		PARADECL = 52,
		POSTDEC = 53,
		POSTINC = 54,
		DECSTATEMENT = 55,
		INCSTATEMENT = 56,
		REF = 57,
		REF_CHECK = 58,
		REF_EXPR = 59,
		RETURN = 60,
		RETF = 61,
		RETP = 62,
		STRUC = 63,
		SYSVAR = 64,
		UMINUS = 65,
		VAR = 66,
		VARPTR = 67,
		END = 68,
		FUNCTION = 69,
		PRO = 70,
		IDENTIFIER = 71,
		METHOD = 72,
		COMMA = 73,
		BEGIN = 74,
		COLON = 75,
		SWITCH = 76,
		OF = 77,
		ELSE = 78,
		CASE = 79,
		END_U = 80,
		FORWARD = 81,
		EQUAL = 82,
		COMPILE_OPT = 83,
		COMMON = 84,
		ENDIF = 85,
		ENDELSE = 86,
		ENDCASE = 87,
		ENDSWITCH = 88,
		ENDFOR = 89,
		ENDWHILE = 90,
		ENDREP = 91,
		DEC = 92,
		INC = 93,
		AND_OP_EQ = 94,
		ASTERIX_EQ = 95,
		EQ_OP_EQ = 96,
		GE_OP_EQ = 97,
		GTMARK_EQ = 98,
		GT_OP_EQ = 99,
		LE_OP_EQ = 100,
		LTMARK_EQ = 101,
		LT_OP_EQ = 102,
		MATRIX_OP1_EQ = 103,
		MATRIX_OP2_EQ = 104,
		MINUS_EQ = 105,
		MOD_OP_EQ = 106,
		NE_OP_EQ = 107,
		OR_OP_EQ = 108,
		PLUS_EQ = 109,
		POW_EQ = 110,
		SLASH_EQ = 111,
		XOR_OP_EQ = 112,
		MEMBER = 113,
		REPEAT = 114,
		UNTIL = 115,
		WHILE = 116,
		DO = 117,
		FOR = 118,
		GOTO = 119,
		ON_IOERROR = 120,
		IF = 121,
		THEN = 122,
		LBRACE = 123,
		RBRACE = 124,
		SLASH = 125,
		LSQUARE = 126,
		RSQUARE = 127,
		SYSVARNAME = 128,
		EXCLAMATION = 129,
		INHERITS = 130,
		LCURLY = 131,
		RCURLY = 132,
		CONSTANT_HEX_BYTE = 133,
		CONSTANT_HEX_LONG = 134,
		CONSTANT_HEX_LONG64 = 135,
		CONSTANT_HEX_INT = 136,
		CONSTANT_HEX_I = 137,
		CONSTANT_HEX_ULONG = 138,
		CONSTANT_HEX_ULONG64 = 139,
		CONSTANT_HEX_UI = 140,
		CONSTANT_HEX_UINT = 141,
		CONSTANT_BYTE = 142,
		CONSTANT_LONG = 143,
		CONSTANT_LONG64 = 144,
		CONSTANT_INT = 145,
		CONSTANT_I = 146,
		CONSTANT_ULONG = 147,
		CONSTANT_ULONG64 = 148,
		CONSTANT_UI = 149,
		CONSTANT_UINT = 150,
		CONSTANT_OCT_BYTE = 151,
		CONSTANT_OCT_LONG = 152,
		CONSTANT_OCT_LONG64 = 153,
		CONSTANT_OCT_INT = 154,
		CONSTANT_OCT_I = 155,
		CONSTANT_OCT_ULONG = 156,
		CONSTANT_OCT_ULONG64 = 157,
		CONSTANT_OCT_UI = 158,
		CONSTANT_OCT_UINT = 159,
		CONSTANT_FLOAT = 160,
		CONSTANT_DOUBLE = 161,
		ASTERIX = 162,
		DOT = 163,
		STRING_LITERAL = 164,
		POW = 165,
		MATRIX_OP1 = 166,
		MATRIX_OP2 = 167,
		MOD_OP = 168,
		PLUS = 169,
		MINUS = 170,
		LTMARK = 171,
		GTMARK = 172,
		NOT_OP = 173,
		LOG_NEG = 174,
		EQ_OP = 175,
		NE_OP = 176,
		LE_OP = 177,
		LT_OP = 178,
		GE_OP = 179,
		GT_OP = 180,
		AND_OP = 181,
		OR_OP = 182,
		XOR_OP = 183,
		LOG_AND = 184,
		LOG_OR = 185,
		QUESTION = 186,
		STRING = 187,
		INCLUDE = 188,
		EOL = 189,
		W = 190,
		D = 191,
		L = 192,
		H = 193,
		O = 194,
		EXP = 195,
		DBL_E = 196,
		DBL = 197,
		CONSTANT_OR_STRING_LITERAL = 198,
		COMMENT = 199,
		END_MARKER = 200,
		WHITESPACE = 201,
		SKIP_LINES = 202,
		CONT_STATEMENT = 203,
		END_OF_LINE = 204,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_GDLTokenTypes_hpp_*/
