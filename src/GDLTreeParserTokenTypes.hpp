#ifndef INC_GDLTreeParserTokenTypes_hpp_
#define INC_GDLTreeParserTokenTypes_hpp_

/* $ANTLR 2.7.4: "gdlc.tree.g" -> "GDLTreeParserTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API GDLTreeParserTokenTypes {
#endif
	enum {
		EOF_ = 1,
		ALL = 4,
		ASSIGN = 5,
		ARRAYDEF = 6,
		ARRAYIX = 7,
		ARRAYIX_ALL = 8,
		ARRAYIX_ORANGE = 9,
		ARRAYIX_RANGE = 10,
		ARRAYEXPR = 11,
		ARRAYEXPR_FN = 12,
		BLOCK = 13,
		COMMONDECL = 14,
		COMMONDEF = 15,
		CONSTANT = 16,
		DEREF = 17,
		ELSEBLK = 18,
		EXPR = 19,
		FOR_STEP = 20,
		FCALL = 21,
		FCALL_LIB = 22,
		IF_ELSE = 23,
		KEYDECL = 24,
		KEYDEF = 25,
		KEYDEF_REF = 26,
		LABEL = 27,
		MPCALL = 28,
		MPCALL_PARENT = 29,
		MFCALL = 30,
		MFCALL_LIB = 31,
		MFCALL_PARENT = 32,
		MFCALL_PARENT_LIB = 33,
		NOP = 34,
		NSTRUC = 35,
		NSTRUC_REF = 36,
		ON_IOERROR_NULL = 37,
		PCALL = 38,
		PCALL_LIB = 39,
		PARADECL = 40,
		POSTDEC = 41,
		POSTINC = 42,
		DECSTATEMENT = 43,
		INCSTATEMENT = 44,
		REF = 45,
		RETURN = 46,
		RETF = 47,
		RETP = 48,
		STRUC = 49,
		SYSVAR = 50,
		UMINUS = 51,
		VAR = 52,
		VARPTR = 53,
		FUNCTION = 54,
		PRO = 55,
		IDENTIFIER = 56,
		METHOD = 57,
		COMMA = 58,
		BEGIN = 59,
		COLON = 60,
		SWITCH = 61,
		OF = 62,
		ELSE = 63,
		CASE = 64,
		END_U = 65,
		FORWARD = 66,
		EQUAL = 67,
		END = 68,
		COMPILE_OPT = 69,
		COMMON = 70,
		ENDIF = 71,
		ENDELSE = 72,
		ENDCASE = 73,
		ENDSWITCH = 74,
		ENDFOR = 75,
		ENDWHILE = 76,
		ENDREP = 77,
		DEC = 78,
		INC = 79,
		AND_OP_EQ = 80,
		ASTERIX_EQ = 81,
		EQ_OP_EQ = 82,
		GE_OP_EQ = 83,
		GTMARK_EQ = 84,
		GT_OP_EQ = 85,
		LE_OP_EQ = 86,
		LTMARK_EQ = 87,
		LT_OP_EQ = 88,
		MATRIX_OP1_EQ = 89,
		MATRIX_OP2_EQ = 90,
		MINUS_EQ = 91,
		MOD_OP_EQ = 92,
		NE_OP_EQ = 93,
		OR_OP_EQ = 94,
		PLUS_EQ = 95,
		POW_EQ = 96,
		SLASH_EQ = 97,
		XOR_OP_EQ = 98,
		MEMBER = 99,
		BREAK = 100,
		CONTINUE = 101,
		REPEAT = 102,
		UNTIL = 103,
		WHILE = 104,
		DO = 105,
		FOR = 106,
		GOTO = 107,
		ON_IOERROR = 108,
		IF = 109,
		THEN = 110,
		LBRACE = 111,
		RBRACE = 112,
		SLASH = 113,
		LSQUARE = 114,
		RSQUARE = 115,
		SYSVARNAME = 116,
		EXCLAMATION = 117,
		LCURLY = 118,
		RCURLY = 119,
		INHERITS = 120,
		CONSTANT_HEX_BYTE = 121,
		CONSTANT_HEX_LONG = 122,
		CONSTANT_HEX_LONG64 = 123,
		CONSTANT_HEX_INT = 124,
		CONSTANT_HEX_I = 125,
		CONSTANT_HEX_ULONG = 126,
		CONSTANT_HEX_ULONG64 = 127,
		CONSTANT_HEX_UI = 128,
		CONSTANT_HEX_UINT = 129,
		CONSTANT_BYTE = 130,
		CONSTANT_LONG = 131,
		CONSTANT_LONG64 = 132,
		CONSTANT_INT = 133,
		CONSTANT_I = 134,
		CONSTANT_ULONG = 135,
		CONSTANT_ULONG64 = 136,
		CONSTANT_UI = 137,
		CONSTANT_UINT = 138,
		CONSTANT_OCT_BYTE = 139,
		CONSTANT_OCT_LONG = 140,
		CONSTANT_OCT_LONG64 = 141,
		CONSTANT_OCT_INT = 142,
		CONSTANT_OCT_I = 143,
		CONSTANT_OCT_ULONG = 144,
		CONSTANT_OCT_ULONG64 = 145,
		CONSTANT_OCT_UI = 146,
		CONSTANT_OCT_UINT = 147,
		CONSTANT_FLOAT = 148,
		CONSTANT_DOUBLE = 149,
		ASTERIX = 150,
		DOT = 151,
		STRING_LITERAL = 152,
		POW = 153,
		MATRIX_OP1 = 154,
		MATRIX_OP2 = 155,
		MOD_OP = 156,
		PLUS = 157,
		MINUS = 158,
		LTMARK = 159,
		GTMARK = 160,
		NOT_OP = 161,
		EQ_OP = 162,
		NE_OP = 163,
		LE_OP = 164,
		LT_OP = 165,
		GE_OP = 166,
		GT_OP = 167,
		AND_OP = 168,
		OR_OP = 169,
		XOR_OP = 170,
		LOG_AND = 171,
		LOG_OR = 172,
		LOG_NEG = 173,
		QUESTION = 174,
		STRING = 175,
		INCLUDE = 176,
		EOL = 177,
		W = 178,
		D = 179,
		L = 180,
		H = 181,
		O = 182,
		EXP = 183,
		DBL_E = 184,
		DBL = 185,
		CONSTANT_OR_STRING_LITERAL = 186,
		COMMENT = 187,
		END_MARKER = 188,
		WHITESPACE = 189,
		SKIP_LINES = 190,
		CONT_STATEMENT = 191,
		END_OF_LINE = 192,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_GDLTreeParserTokenTypes_hpp_*/
